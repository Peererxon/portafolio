{"version":3,"sources":["shared/redux/aside/asideTypes.js","i18n.js","shared/components/Preloader_line.jsx","shared/redux/aside/asideReducer.js","shared/redux/rootReducer.js","shared/redux/store.js","shared/routes/App.js","serviceWorker.js","index.js"],"names":["TOGGLE_MENU","i18n","use","initReactI18next","init","resources","en","es","fallbackLng","Preloader","className","initialState","open","combineReducers","asideReducer","state","type","modal","classContent","animation","duration","mask","title","middleware","createStore","applyMiddleware","NotFoundPromise","reactReduxModal","NotFound","React","lazy","Modal","Layout","Resume","Work","Home","App","basename","process","fallback","exact","path","component","store","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGAAA,kCAAO,IAAMA,EAAc,e,q9QCK3BC,IACGC,IAAIC,KACJC,KAAK,CACJC,UAAW,CAACC,KAAGC,MACfC,YAAa,OAGFP,EAAf,EAAeA,I,eCCAQ,G,wBAXG,kBAEd,yBAAKC,UAAW,aACZ,yBAAKA,UAAU,YACX,yBAAKA,UAAU,sB,wCCJrBC,EAAe,CACjBC,MAAK,GCCMC,cAAgB,CAC7BC,aDC0B,WAAqC,IAApCC,EAAmC,uDAA3BJ,EAA2B,yCAAXK,EAAW,EAAXA,KACjD,OAAQA,GAER,KAAKhB,IACD,OAAO,2BAAKe,GAAZ,IAAmBH,MAAOG,EAAMH,OAEpC,QACI,OAAOG,ICPbE,MAAOA,kBAAO,CACZC,aAAc,gBACdC,UAAW,SACXC,SAAU,IACVC,MAAM,EACNC,MAAO,SCRPC,EAAa,GAQfA,EAAa,GAEAC,kBAAaX,EAAiBY,IAAe,WAAf,cAAoBF,KCA3DG,EAAkB,8BAClBC,EAAkB,4CAElBC,EAAWC,IAAMC,MAAM,kBAAKJ,KAC5BK,EAAQF,IAAMC,MAAM,kBAAKH,KACzBK,EAASH,IAAMC,MAAM,kBAAM,iCAC3BG,EAASJ,IAAMC,MAAM,kBAAM,wDAC3BI,EAAOL,IAAMC,MAAM,kBAAM,+DACzBK,EAAON,IAAMC,MAAM,kBAAM,8DAyBhBM,MArBf,WAEE,OACE,kBAAC,IAAD,CAAeC,SAAWC,gBACxB,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAACP,EAAD,KACE,kBAAC,WAAD,CAAUO,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAIC,UAAaP,IACpC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,UAAUC,UAAaT,IACzC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,QAAQC,UAAaR,IACvC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAIC,UAAad,OAIzC,kBAACG,EAAD,CAAOY,MAAQA,OC5BHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCLNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUR,MAAQA,GAChB,kBAAC,EAAD,QAGJS,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d675a9f.chunk.js","sourcesContent":["export const TOGGLE_MENU = \"TOGGLE_MENU\";","import i18n from \"i18next\";\nimport { initReactI18next } from 'react-i18next';\nimport en from './shared/utils/i18n/en/index.json';\nimport es from './shared/utils/i18n/es/index.json'\n\ni18n\n  .use(initReactI18next)\n  .init({\n    resources: {en,es},\n    fallbackLng: 'es'\n  });\n\nexport default i18n;\n","import React from 'react'\n\nconst Preloader = () => (\n    \n    <div className= \"Preloader\">\n        <div className=\"progress\">\n            <div className=\"indeterminate\">\n            </div>\n        </div>  \n    </div>\n\n)\n\nexport default Preloader;","import { TOGGLE_MENU } from \"./asideTypes\"\n\nconst initialState = {\n    open:false\n}\n\nexport const asideReducer = (state = initialState, { type }) => {\n    switch (type) {\n\n    case TOGGLE_MENU:\n        return { ...state, open: !state.open }\n\n    default:\n        return state\n    }\n}\n","import { combineReducers } from 'redux';\nimport { reducer as modal } from 'react-redux-modal-flex';\nimport { asideReducer } from './aside/asideReducer';\n\nexport default combineReducers({\n  asideReducer,\n  modal: modal( {\n    classContent: 'modal-content',\n    animation: 'zoomIn',\n    duration: 200,\n    mask: true,\n    title: null,\n    /* initial state, see API reference */\n  } ),\n})","import { applyMiddleware, createStore } from 'redux';\n//import logger from 'redux-logger';\nimport combineReducers from './rootReducer'\nlet middleware = [];\n\n//configuracion para desarrollo\nif (process.env.NODE_ENV !== 'production') {\n  const logger = require('redux-logger');\n  middleware = [logger.default];\n} else {\n  //configuracion para producciÃ³n\n  middleware = [];\n}\nexport default createStore( combineReducers, applyMiddleware( ...middleware ) )\n","import React, { Suspense } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport './App.scss';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport Preloader from '../components/Preloader_line';\nimport store from '../redux/store';\n\n//import Header from '../Header';\n//import Layout from '../Layout';\n\n//Lazy components\nconst NotFoundPromise = import( /* webpackChunkName: \"notFoundLazy\" */ '../../notfound/NotFount' );\nconst reactReduxModal = import( /* webpackChunkName: \"flex-Modal\" */ 'react-redux-modal-flex' );\n//esto lo que hace es que notFound se cargue en la primera carga PERO no impida el flujo del render es decir carga en paralelo a la vista actual\nconst NotFound = React.lazy( ()=> NotFoundPromise );\nconst Modal = React.lazy( ()=> reactReduxModal );\nconst Layout = React.lazy( () => import ( /* webpackChunkName: \"LayoutLazy\" */ '../Layout' ) );\nconst Resume = React.lazy( () => import ( /* webpackChunkName: \"ResumeLazy\" */ '../../resume' ) );\nconst Work = React.lazy( () => import ( /* webpackChunkName: \"WorkLazy\" */ '../../work' ) );\nconst Home = React.lazy( () => import ( /* webpackChunkName: \"HomeLazy\" */ '../../home/Home' ) ); //usando code splitting con rutas\n//EndLazy components\n\n// eslint-disable-next-line brace-style\nfunction App() {\n\n  return (\n    <BrowserRouter basename ={process.env.PUBLIC_URL} >\n      <Suspense fallback={<Preloader/>}>\n        <Layout>\n          <Suspense fallback={<Preloader/>}>\n            <Switch>\n              <Route exact path= \"/\" component = {Home} />\n              <Route exact path=\"/resume\" component = {Resume} />\n              <Route exact path=\"/work\" component = {Work} />\n              <Route exact path=\"*\" component = {NotFound}/>\n            </Switch>\n          </Suspense>\n        </Layout>\n        <Modal store= {store}/>\n      </Suspense>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n//traduccion de idiomas\nimport './i18n';\n\nimport Portafolio from './shared/routes/App';\n\nimport * as serviceWorker from './serviceWorker';\n//redux\nimport { Provider } from 'react-redux';\nimport store from './shared/redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store= {store}>\n      <Portafolio />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}