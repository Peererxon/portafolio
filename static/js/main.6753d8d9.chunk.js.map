{"version":3,"sources":["shared/Header.jsx","shared/src/frontal-min.png","notfound/NotFount.jsx","shared/components/Preloader_line.jsx","shared/Footer.jsx","shared/Layout.jsx","shared/routes/App.js","serviceWorker.js","index.js"],"names":["Header","contexto","useContext","contextoPadre","className","src","Logo","alt","href","data-target","español","nombre","id","module","exports","NotFound","Fragment","Preloader","Footer","children","Layout","Home","React","lazy","App","useEffect","elem","document","querySelector","M","Sidenav","init","Edge","inDuration","basename","process","fallback","exact","path","component","Boolean","window","location","hostname","match","createContext","ReactDOM","render","StrictMode","Provider","value","apellido","texto1","parrafo","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGAAA,2DAoCeA,UA7BA,WACb,IAAMC,EAAWC,qBAAWC,iBAC5B,OACE,6BACE,gCACE,6BACE,yBAAKC,UAAU,qBAEb,yBAAKC,IAAMC,IAAOC,IAAI,mBAAmBH,UAAU,qCACnD,uBAAGI,KAAK,IAAIC,cAAY,cAAcL,UAAU,mBAAkB,uBAAGA,UAAU,kBAAb,SAClE,wBAAIA,UAAU,8BACZ,4BAAI,uBAAGI,KAAK,aAAR,QAA0BP,EAASS,aAAQ,GAAGC,OAA9C,MACJ,4BAAI,uBAAGH,KAAK,eAAR,eACJ,4BAAI,uBAAGA,KAAK,oBAAR,eACJ,4BAAI,uBAAGA,KAAK,eAAR,cAIV,wBAAIJ,UAAU,UAAUQ,GAAG,eACzB,4BAAI,uBAAGJ,KAAK,aAAR,QAA0BP,EAASS,aAAQ,GAAGC,SAClD,4BAAI,uBAAGH,KAAK,eAAR,eACJ,4BAAI,uBAAGA,KAAK,oBAAR,eACJ,4BAAI,uBAAGA,KAAK,eAAR,gB,mBC7BdK,EAAOC,QAAU,IAA0B,yC,sSCe5BC,EAbE,kBACb,kBAAC,IAAMC,SAAP,KAEA,gDCQWC,EAXG,kBAEd,6BACI,yBAAKb,UAAU,YACX,yBAAKA,UAAU,qB,QCEZc,EANA,SAAC,GAAD,EAAGC,SAAH,OACX,gCACI,6DCQOC,EARA,SAAC,GAAD,IAAGD,EAAH,EAAGA,SAAH,OACX,6BACI,kBAACnB,EAAA,QAAD,MACCmB,EACD,kBAAC,EAAD,QCOFE,GADSC,IAAMC,MAAM,kBAAM,2CACpBD,IAAMC,MAAM,kBAAM,iCA4BhBC,MAxBf,WASE,OAPAC,qBAAU,WACR,IAAIC,EAAOC,SAASC,cAAc,YACnBC,IAAEC,QAAQC,KAAKL,EAAM,CAChCM,KAAM,OACNC,WAAY,QAEhB,IAEA,kBAAC,IAAD,CAAeC,SAAWC,IACxB,kBAAC,EAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAIC,UAAalB,IACpC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,IAAIC,UAAaxB,S,MCtB3ByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXC,IAAMzC,EAAgBmB,IAAMuB,gBAUnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC7C,EAAc8C,SAAf,CAAwBC,MAXZ,CACd,aAAW,CACP,CAACvC,OAAO,WAAWwC,SAAS,OAC5B,CAACC,OAAO,UAAUC,QAAQ,oBAS1B,kBAAC,EAAD,QAGJ1B,SAAS2B,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6753d8d9.chunk.js","sourcesContent":["import React,{useContext} from \"react\";\nimport \"./styles/Header.scss\";\nimport Logo from './src/frontal-min.png';\n//import M from \"materialize-css/dist/js/materialize.min.js\";\n//import { BrowserRouter, Route } from \"react-router-dom\";\nimport { contextoPadre } from \"..\";\n\nconst Header = () => {\n  const contexto = useContext(contextoPadre);\n  return(\n    <div>\n      <header>\n        <nav>\n          <div className=\"nav-wrapper black\">\n            \n            <img src={ Logo } alt=\"imagen principal\" className=\"brand-logo circle responsive-img\" />\n            <a href=\"#\" data-target=\"mobile-demo\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n            <ul className=\"right hide-on-med-and-down\">\n              <li><a href=\"sass.html\">Sass {contexto.español[0].nombre} </a></li>\n              <li><a href=\"badges.html\">Components</a></li>\n              <li><a href=\"collapsible.html\">Javascript</a></li>\n              <li><a href=\"mobile.html\">Mobile</a></li>\n            </ul>\n          </div>\n        </nav>\n        <ul className=\"sidenav\" id=\"mobile-demo\">\n          <li><a href=\"sass.html\">Sass {contexto.español[0].nombre}</a></li>\n          <li><a href=\"badges.html\">Components</a></li>\n          <li><a href=\"collapsible.html\">Javascript</a></li>\n          <li><a href=\"mobile.html\">Mobile</a></li>\n        </ul>\n      </header>\n    </div>\n  );\n}\n\nexport default Header;\n","module.exports = __webpack_public_path__ + \"static/media/frontal-min.09ee16c7.png\";","import React from 'react'\n\nconst NotFound = ()=>(\n    <React.Fragment>\n\n    <div>No encontrada</div>\n    </React.Fragment>\n//la ventaja de usar Fragment es que no agrega otro elemento al dom\n//lo que hace que si no necesitamos un contenedor para darle estilos o algo similar,optimicemos nuestra aplicacion\n    //\n    //<> Esto es lo mismo que arriba\n    //    <div>No encontrado</div>\n    //</>\n)\n\nexport default NotFound\n","import React from 'react'\n\nconst Preloader = () => (\n    \n    <div>\n        <div className=\"progress\">\n            <div className=\"indeterminate\">\n            </div>\n        </div>  \n    </div>\n\n)\n\nexport default Preloader;","import React from 'react';\n\nconst Footer = ({ children }) =>(\n    <footer>\n        <p>esto es una prueba de footer</p>\n    </footer>\n);\n\nexport default Footer;","import React from 'react'\nimport Header from './Header'\nimport Footer from './Footer'\n\nconst Layout = ( {children} ) => (\n    <div>\n        <Header/>\n        {children}\n        <Footer/>\n    </div>\n);\n\nexport default Layout;","import React, {Suspense,useEffect } from 'react';\nimport {BrowserRouter,Switch,Route} from 'react-router-dom'\nimport './App.css';\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport M from \"materialize-css/dist/js/materialize.min.js\";\n\n//import M from 'materialize-css';\nimport NotFound from '../../notfound/NotFount';\nimport Preloader from '../components/Preloader_line';\n//import Header from '../Header';\nimport Layout from '../Layout';\n//import Home from '../../home/Home';\n//Lazy components\nconst Header = React.lazy( () => import ('../Header') );\nconst Home = React.lazy( () => import ('../../home/Home') ); //usando code splitting con rutas\n\n//EndLazy components\n\nfunction App() {\n\n  useEffect(() => {\n    var elem = document.querySelector(\".sidenav\"); \n    var instance = M.Sidenav.init(elem, {\n        Edge: \"left\",\n        inDuration: 250\n    });\n  },[]);\n  return (\n    <BrowserRouter basename ={process.env.PUBLIC_URL} >\n      <Layout>\n        <Suspense fallback={<Preloader/>}>\n          <Switch>\n            <Route exact path= \"/\" component = {Home} />\n            <Route exact path=\"*\" component = {NotFound}/>\n          </Switch>\n        </Suspense>\n      </Layout>\n    \n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React,{useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Portafolio from './shared/routes/App';\nimport './shared/styles/bodyStyles.scss'\nimport * as serviceWorker from './serviceWorker';\n\nexport const contextoPadre = React.createContext()\nconst idiomas = {\n  \"español\": [\n      {nombre:\"anderson\",apellido:\"gil\"},\n      {texto1:\"crallon\",parrafo:\"eres un webon\"}\n  ],\n};\n\n//export const [ idioma,setIdioma ] = useState(\"\")\n\nReactDOM.render(\n  <React.StrictMode>\n    <contextoPadre.Provider value = {idiomas}>\n      <Portafolio />\n    </contextoPadre.Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}